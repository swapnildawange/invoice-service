// Code generated by MockGen. DO NOT EDIT.
// Source: invoice_service/user (interfaces: BL)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "invoice_service/model"
	reflect "reflect"
)

// MockBL is a mock of BL interface
type MockBL struct {
	ctrl     *gomock.Controller
	recorder *MockBLMockRecorder
}

// MockBLMockRecorder is the mock recorder for MockBL
type MockBLMockRecorder struct {
	mock *MockBL
}

// NewMockBL creates a new mock instance
func NewMockBL(ctrl *gomock.Controller) *MockBL {
	mock := &MockBL{ctrl: ctrl}
	mock.recorder = &MockBLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBL) EXPECT() *MockBLMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockBL) CreateUser(arg0 context.Context, arg1 model.CreateUserRequest) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockBLMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockBL)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method
func (m *MockBL) DeleteUser(arg0 context.Context, arg1 model.DeleteUserReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockBLMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockBL)(nil).DeleteUser), arg0, arg1)
}

// EditUser mocks base method
func (m *MockBL) EditUser(arg0 context.Context, arg1 model.EditUserRequest) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUser indicates an expected call of EditUser
func (mr *MockBLMockRecorder) EditUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockBL)(nil).EditUser), arg0, arg1)
}

// ListUsers mocks base method
func (m *MockBL) ListUsers(arg0 context.Context, arg1 model.UserFilter) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockBLMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockBL)(nil).ListUsers), arg0, arg1)
}

// Login mocks base method
func (m *MockBL) Login(arg0 context.Context, arg1 model.LoginRequest) (model.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login
func (mr *MockBLMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockBL)(nil).Login), arg0, arg1)
}
